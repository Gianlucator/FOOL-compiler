#TODO: scazzo completo, non vede x, risolvere.
test55 - Subtyping hell in returntype:
-   class A
    class B implements A (A a, A b)
    class X {
       B get() new B(new A, new B(new A, new A));
    };
    let
        X x = new X;
        B kek() x.get();
        B b2 = new B(x.get(), kek());
    in
        print(777);
-   "777"

ti sfotto e ti fotto:
-   class Numero (int x) {
        int getNum() x;
    }
    class Numero2 implements Numero (int x) {
      int getNum() x + 1;
    };
    let
        Numero uno() new Numero2(1);
        Numero num = uno();
    in
        print(num.getNum());
-   "2"

Costruttore ereditato test 2:
- class A(int a, int b) {
    int getA() a;
    int getB() b;
  }
  class B implements A (int a, int b, int c){
    int getC() c;
  };
  let A b = new B(1, 2, 7);
  in print(b.getC());
- "7"

class in input method:
- class A {
    int b() 2;
  }
  class B {
    int aparam(A param) param.b();
  };
  let B obj = new B; A a = new A;
  in print(obj.aparam(a));
- "2"

sooca:
- class Area{
    int s() 1;
  }
  class Rectangle{
    int t() 2;
  };
  let Area p = new Area;
      Rectangle q = new Rectangle;
  in print(p.s() + q.t());
- "3"

classe singola dec:
- class Rectangle(int l1, int l2) {
    int area() l1 * l2;
    int getL1() l1;
    int getL2() l2;
    int scaleArea(int scaling) scaling * l1 * l2;
    int calcArea(int l1, int l2) l1 * l2;
  };

  let Rectangle r = new Rectangle(2, 4);
  in print(r.calcArea(3, 5));
- "15"

inheritance semplice:
- class A {
    int u() 1;
  }
  class B implements A {
    int s(int x) x + 1;
  };

  let A x = new B;
  in print(x.u());
- "1"

overriding:
- class A {
    int u() 2;
    int k() 5;
  }
  class B implements A{
    bool u() true;
    int s() 3;
    int k() 6;
  };

  let A x = new B ;
  in print(x.k());
- "6"

covarianza corr:
- class Parent(int a) {
    int f(int x) 2 * 2;
    int r(int y) 2 * y;
  }
  class Child implements Parent (int a) {
     int f(int x) 2 * x;
     int r(int y) 3 * y;
  };

  let int x = 4; Parent o = new Child(x);
  in print(o.f(x));
- "8"

covarianza errato 1:
- class Parent(int a) {
    int f(int x) x;
  }
  class Child implements Parent (int a) {
    int f(int x) x;
  };
  let int x = 4; Parent o = new Child(x);
  in print(8);
- "8"

tipo di ritorno errato e override errato:
- class Parent(int a) {
    Child r(Child c) c.f(2) + a;
  }
  class Child implements Parent (int a) {
    int r(Child c) 2 * x;
  };

  let int x = 4;
  Child c = new Child(x);
  Parent o = new Child(x); in o.r(c);
- "semantic errors"

covarianza errato 2:
- class Parent(int a) {
    Child p(Child c) c.f(2);
  }
  class Child implements Parent (int a) {
    Child p(Child c) 2 * x;
  };

  let int x = 4; Parent o = new Child(x); in o.f(x);
- "semantic errors"

#########TEST GIANLUCA


class in input method2:
- class A {
    int afun() 2;
  }
  class B(int p) {
    int aparam(A param) p * param.afun();
  };
  let B obj = new B(5); A a = new A;
  in print(obj.aparam(a));
- "10"

class in input method2:
- class A {
    int afun() 2;
  }
  class B(int p) {
    int aparam(A param) p * param.afun();
  };
  let B obj = new B(5); A a = new A;
  in print(obj.aparam(a));
- "10"

Costruttore ereditato test 1:
- class A(int a, int b) {
    int getA() a;
    int getB() b;
  }
  class B implements A (int c){
    int getC() c;
  };
  let B b = new B(1, 2, 3);
  in print(b.getC());
- "3"

Superclass getter:
- class A(int a, int b) {
    int getA() a;
    int getB() b;
  }
  class B implements A (int c){
    int getter() this.getB();
  };
  let B b = new B(5, 2, 3);
  in print(b.getter());
- "2"

Self extending:
- class A implements A (int a, int b) {
    int getA() a;
    int getB() b;
  }
  class B implements A (int c){
    int getter() this.getB();
  };
 let B b = new B(5, 2, 3);
 in print(b.getter());
- "semantic errors"

##########FINE TEST GIANLUCA

#covarianza errato 5:
#- class GranParent(int a) {
#      Parent p(Parent o) o;
#  }
#
#  class Parent implements GrandParent(int a){
#      GrandParent p(GrandParent c) c;
#  };
#
#  let int x = 4; Parent o = new Parent(x); in o.p(x);
#- ""

#covarianza corr:
#- class GranParent(int a) {
#    Parent p(Parent o) o;
#  }
#
#  class Parent implements GrandParent(int a){
#    Child p(Child c) c;
#  }
#
#  class Child implements GrandParent(int x){
#    int f(int x) 2 * x;
#  };
#
#  let
#  int x = 4;
#  Child c = new Child(x);
#  Parent o = new Parent(x);
#  in o.p(c);
#- ""

## DA RISOLVERE ##
# Sintassi


# ritorna oggetti e non va bbene
test21 - Call method on object returned by method:
-   class Numero (int x) {
        Numero uno() new Numero(4);
        int due() x;
    };
    let
        Numero num = new Numero(2);
        Numero num2 = num.uno();
    in
        print(num2.due());
-   "4"

# ritorna oggetti e non va bbene
test22 - Call method on object returned by method + stuff:
-   class Numero (int x) {
        Numero uno() new Numero(2 * x);
        int due() x;
    };
    let
        Numero num = new Numero(2);
        Numero num1 = new Numero(3);
        Numero num2 = num.uno();
        Numero num3 = num1.uno();
    in
        print(num2.due() + num3.due());
-   "10"

# TODO: da risolvere
test23 - Function returning an object:
-   class Numero (int x) {
        int getNum() x;
    };
    let
        Numero uno() new Numero(1);
        Numero num = uno();
    in
        print(num.getNum());
-   "1"

# TODO non deve dare null pointer
test25 - Using this as expression:
-   class Numero (int x) {
        Numero getThis() this;
        int getX() x;
    };
    let
        Numero num = new Numero(8);
        Numero num2 = num.getThis();
    in
        print(num2.getX());
-   "8"

# da un errore di typecheck non so perche'
test27 - Non-overwritted method call:
-   class Animale(int Age, bool Alive){
        int getAge() Age;
        bool isAlive() Alive;
    }

    class Cane implements Animale(int Age, bool Alive){
        int quantoViveAncora()
            if(Alive) then {
                if(Age == 15) then {
                    (15 - Age)
                } else {
                    1
                }
            } else {
                0
            };
    }

    class BullDog implements Cane(int Age, bool Alive){
        int quantoViveAncora()
            if(Alive) then {
                if(Age == 8) then {
                    (8 - Age)
                } else {
                    1
                }
            } else {
                0
            };
    };

    let
        Cane tom = new Cane( 7 , false );
        Cane roger = new BullDog( 6 , true);
    in
        print(roger.getAge() + roger.quantoViveAncora());
-   "7"

# dovrebbe uscire
28 - Overring methods with incompatible types:
-   class A {
        int f(int x) x;
    }
    class B implements A
    class C implements B {
        bool f(bool x) x;
    };
    let
        C c = new C;
    in
        print(c.f(false));
-   "0"

# uso di this, bisogna dare errore e uscire
#test43 - this with subtyping:
#-   class A
#    class B implements A {
#        int get()
#            let
#                int nestedGet(A a) 5;
#            in
#                nestedGet(this)
#        ;
#    };
#    let
#        B b = new B;
#    in
#        print(b.get());
#-    "5"

# non si blocca col type check
test44 - Incompatible object types assignment:
-   class A
    class N;
    let
        A a = new N;
    in
        print(4);
-   "4"

# non si blocca col type check e se ne fotte
test45 - Implicit cast to supertype and method invocation:
-   class A
    class B {
        int get() 2;
    };
    let
        A a = new B;
    in
        print(a.get());
-   "2"

# gli oggetti vengo messi nell'object environment solo con una new
test49 - New inside new:
-   class A (int x) {
        int value() x;
    }
    class B implements A (int x, A a) {
        A getA() a;
    }
    ;
    let
        B b = new B(0, new B(10, new A(2)));
        A a = b.getA();
    in
        print(b.value() + a.value());
-   "10"

# stesso problema del 49
test51 - Subclass inside superclass:
-   class A (int x) {
        B createB() new B(x, 2);
    }
    class B implements A (int x, int y) {
        int getX() x;
        int getY() y;
    }
    ;
    let
        A a = new A(1);
        B b = a.createB();
    in
        print(b.getY());
-   "2"

metodi ricorsivi nella stessa classe:
-   class Fabonicci (int x) {
        int get(int x) if (x == 20) then {42} else {this.foo(x)};
        int foo(int x) this.get(x + 1);
    };
    let Fabonicci f = new Fabonicci(20);
    in print(f.get(0));
-   "42"

# print ha problemi
#test52 - Subclass inside superclass' constructor:
#-   class A (B b)
#    class B implements A (B b);
#    print(1);
#-   "1"

#Funziona: dà errore di tipo di parametro incompatibile
#covarianza err:
#- class Parent(int a) {
#    int f(int x) 2 * 2;
#    int r(int y) 2 * y;
#  }
#  class Child implements Parent (int a) {
#     bool f(int x) 2 * x;
#     int r(int y) 3 * y;
#  };
#
#  let bool x = 4; Parent o = new Child(x);
#  in o.f(x);
#- ""

#Funziona: dà errore di tipo di ritorno incompatibile
#controvarianza err:
#- class Parent(int a) {
#    int f(int x) 2 * 2;
#    int r(int y) 2 * y;
#  }
#  class Child implements Parent (int a) {
#     int f(int x) 2 * x;
#     int r(bool y) 3 * y;
#  };
#  let bool x = 4; Parent o = new Child(x); in o.r(x);
#- ""

