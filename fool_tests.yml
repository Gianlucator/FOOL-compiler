##########################################################
#					     MAIN TESTS                      #
##########################################################

Mutually recursive methods in the same class:
-   class Fabonicci (int x) {
        int get(int x) if (x == 20) then {42} else {this.foo(x)};
        int foo(int x) this.get(x + 1);
    };
    let Fabonicci f = new Fabonicci(20);
    in print(f.get(0));
-   "42"

Dynamic Dispatch:
- class Numero(int x) {
      int getX() x;
      int getY() x;
  }
  class NumeroI implements Numero(int x) {
      int getY() x + 1;
  }
  class NumeroV implements Numero(int x) {
      int getX() x + 2;
      int getY() x + 3;
  }
  class NumeroX implements NumeroV(int x) {
      int getX() x + 3;
  };
  let
      Numero num = new Numero(2);
      Numero num1 = new NumeroI(2);
      Numero num2 = new NumeroV(2);
      Numero num3 = new NumeroX(2);
  in
      print(num.getX() + num1.getY() + num2.getX() + num3.getY());
- "14"

Subtyping hell in return type:
-   class A
    class B implements A (A a, A b)
    class X {
       B get() new B(new A, new B(new A, new A));
    };
    let
        X x = new X;
        B kek() x.get();
        B b2 = new B(x.get(), kek());
    in
        print(777);
-   "777"

Overriding:
- class A {
    int u() 2;
    int k() 5;
  }
  class B implements A{
    bool u() true;
    int s() 3;
    int k() 6;
  };
  let A x = new B;
  in print(x.k() + x.u());
- "7"

Overriding2:
-   class A {
        int f() 1;
    }
    class B implements A {
        int f() 3;
    };
    let
        A a = new A;
        A b = new B;
    in
        print(a.f() + b.f());
-   "4"

Field and method override:
- class Parent(int a) {
    int f(int x) 2 * 2;
    int r(int y) 2 * y;
  }
  class Child implements Parent (int a) {
     int f(int x) 2 * x;
     int r(int y) 3 * y;
  };

  let int x = 4; Parent o = new Child(x);
  in print(o.f(x));
- "8"

New inside new:
-   class A (int x) {
        int value() x;
    }
    class B implements A (int x, A a) {
        A getA() a;
    }
    ;
    let
        B b = new B(0, new B(10, new A(2)));
        A a = b.getA();
    in
        print(b.value() + a.value());
-   "10"

Method calling method:
-   class Numero (int x){
        int uno() x;
        int due() this.uno();
    };
    let
        Numero num = new Numero(2);
    in
        print(num.due());
-   "2"

Scope Hell inside Class:
-   class Numero (int x) {
        int getX()
            let
                int y = 3;
            in
                x;
        int getRedefinedX()
            let
                int x = 3;
            in
                x;
        int getParamX(int x)
            x;
        int getXInsideFun()
            let
                int f() x;
            in
                f();
    };
    let
        Numero num = new Numero(5);
    in
        print(num.getX() + num.getRedefinedX() + num.getParamX(10) + num.getXInsideFun());
-   "23"

Overriding methods with compatible class subtypes:
-   class A
    class B implements A
    class C {
        int g(B b) 1;
    }
    class D implements C{
        int g(A a) 2;
    };
    let
        A a = new A;
        D d = new D;
    in
        print(d.g(a));
-   "2"

Subtyping in method call:
-   class A (int x) {
        int getX() x;
    }
    class B implements A (int x)
    class C {
        int get(A x) x.getX();
    };
    let
        A a = new A(3);
        B b = new B(7);
        C c = new C;
    in
        print(c.get(a) + c.get(b));
-   "10"

Method visibility inside class scope:
-   class A {
        int f() this.g();
        int g() 1;
    };
    let
      A a = new A;
    in
      print(a.f());
-   "1"

Class declaration visibility inside global scope 3:
-   class C implements B (A a)
    class B implements A (A a)
    class A {
      int foo(F f) 9;
    }
    class F {
      int foo(F f) 6;
    };
    let
      B b = new B(new A);
      F f = new F;
    in
      print(b.foo(f));
-   "9"

##########################################################

##########################################################
#					  SEMANTIC ERRORS                    #
##########################################################

Class not declared:
- let A nonExistent = new A;
  in print(0);
- "semantic errors"

Class field referring to non-existent Class:
- class A (B b);
  let int x = 42;
  in print(x);
- "semantic errors"

Self extending:
- class A implements A (int a, int b) {
    int getA() a;
    int getB() b;
  }
  class B implements A (int c){
    int getter() this.getB();
  };
 let B b = new B(5, 2, 3);
 in print(b.getter());
- "semantic errors"

Wrong return type and wrong override:
- class Parent(int a) {
    Child r(Child c) c.f(2) + a;
  }
  class Child implements Parent (int a) {
    int r(Child c) 2 * x;
  };

  let int x = 4;
  Child c = new Child(x);
  Parent o = new Child(x); in o.r(c);
- "semantic errors"

Method not declared:
- class Parent(int a) {
    Child p(Child c) c.f(2);
  }
  class Child implements Parent (int a) {
    Child p(Child c) 2 * x;
  };

  let int x = 4; Parent o = new Child(x); in o.f(x);
- "semantic errors"

Undefined var in method:
- class A {
      int id(int x) x;
  };
  let
      A a = new A;
  in
      print(a.id(i));
- "semantic errors"

Use of undeclared variable as constructor parameter:
- class A(int a, int b);
  let
      int foo(int x)
              if (true) then { new A(1, pluto) } else { print(x) };
  in
      foo(1);
- "semantic errors"

##########################################################

##########################################################
#					TYPE CHECKING ERRORS                 #
##########################################################

Incompatible class error:
-   class A
    class B {
        int get() 2;
    };
    let
        A a = new B;
    in
        print(a.get());
-   "type errors"

#Funziona: d√† errore di tipo di ritorno incompatibile
Wrong contravariance with standard types:
- class Parent(int a) {
    int f(int x) 2 * 2;
    int r(int y) 2 * y;
  }
  class Child implements Parent (int a) {
     int f(int x) 2 * x;
     int r(bool y) 3 * y;
  };
  let bool x = 4; Parent o = new Child(x); in o.r(x);
- "type errors"

Implicit cast to supertype and method invocation:
-   class A
    class B {
        int get() 2;
    };
    let
        A a = new B;
    in
        print(a.get());
-   "type errors"

Incompatible object types assignment:
-   class A
    class N;
    let
        A a = new N;
    in
        print(4);
-   "type errors"

Overriding methods with incompatible types:
-   class A {
        int f(int x) x;
    }
    class B implements A
    class C implements B {
        bool f(bool x) x;
    };
    let
        C c = new C;
    in
        print(c.f(false));
-   "type errors"

Wrong Covariance with objects:
- class GrandParent(int a) {
      Parent p(Parent o) o;
  }
  class Parent implements GrandParent(int a){
      GrandParent p(GrandParent c) c;
  };
  let int x = 4; Parent o = new Parent(x); in o.p(x);
- "type errors"

Wrong contravariance with objects:
- class GrandParent(int a) {
    Parent p(Parent o) o;
  }
  class Parent implements GrandParent(int a){
    Child p(Child c) c;
  }
  class Child implements GrandParent(int x){
    int f(int x) 2 * x;
  };
  let
    int x = 4;
    Child c = new Child(2, x);
    Parent o = new Parent(x);
  in o.p(c);
- "type errors"

##########################################################

##########################################################
#						INHERITANCE                      #
##########################################################

Simple method inheritance:
- class A {
    int u() 1;
  }
  class B implements A {
    int s(int x) x + 1;
  };

  let B x = new B;
  in print(x.u());
- "1"

Inheritance:
- class A(int a, int b) {
    int getA() a;
    int getB() b;
  }
  class B implements A (int a, int b, int c){
    int getC() c;
  };
  let A b = new B(1, 2, 7);
  in print(b.getC());
- "7"

Inheritance2:
- class A(int a, int b) {
    int getA() a;
    int getB() b;
  }
  class B implements A (int c){
    int getC() c;
  };
  let B b = new B(1, 2, 3);
  in print(b.getC());
- "3"

##########################################################

##########################################################
#			  CORRECT EXAMPLES WITH RESULT               #
##########################################################

Return type of function with subtyping hell:
-   class Numero (int x) {
        int getNum() x;
    }
    class Numero2 implements Numero (int x) {
      int getNum() x + 1;
    };
    let
        Numero uno() new Numero2(1);
        Numero num = uno();
    in
        print(num.getNum());
-   "2"

Class in input method:
- class A {
    int b() 2;
  }
  class B {
    int aparam(A param) param.b();
  };
  let B obj = new B; A a = new A;
  in print(obj.aparam(a));
- "2"

Simple method call from different classes:
- class Area{
    int s() 1;
  }
  class Rectangle{
    int t() 2;
  };
  let Area p = new Area;
      Rectangle q = new Rectangle;
  in print(p.s() + q.t());
- "3"

Using this as expression:
-   class Numero (int x) {
        Numero getThis() this;
        int getX() x;
    };
    let
        Numero num = new Numero(8);
        Numero num2 = num.getThis();
    in
        print(num2.getX());
-   "8"

Using this with subtyping:
-   class Numero (int x) {
        Numero getThis() this;
        int getX() x;
    }
    class Numero2 implements Numero (int x) {
        Numero2 getThis() this;
    };
    let
        Numero2 num = new Numero2(12);
        Numero num2 = num.getThis();
    in
        print(num2.getX());
-   "12"

This with subtyping:
-   class A
    class B implements A {
        int get()
            let
                int nestedGet(A a) 5;
            in
                nestedGet(this)
        ;
    };
    let
        B b = new B;
    in
        print(b.get());
-    "5"

Single class with multiple method:
- class Rectangle(int l1, int l2) {
    int area() l1 * l2;
    int getL1() l1;
    int getL2() l2;
    int scaleArea(int scaling) scaling * l1 * l2;
    int calcArea(int l1, int l2) l1 * l2;
  };
  let Rectangle r = new Rectangle(2, 4);
  in print(r.calcArea(3, 5));
- "15"

class in input method2:
- class A {
    int afun() 2;
  }
  class B(int p) {
    int aparam(A param) p * param.afun();
  };
  let B obj = new B(5); A a = new A;
  in print(obj.aparam(a));
- "10"

Superclass getter:
- class A(int a, int b) {
    int getA() a;
    int getB() b;
  }
  class B implements A (int c){
    int getter() this.getB();
  };
  let B b = new B(5, 2, 3);
  in print(b.getter());
- "2"

Call method on object returned by method:
-   class Numero (int x) {
        Numero uno() new Numero(4);
        int due() x;
    };
    let
        Numero num = new Numero(2);
        Numero num2 = num.uno();
    in
        print(num2.due());
-   "4"

Call method on object returned by method2:
-   class Numero (int x) {
        Numero uno() new Numero(2 * x);
        int due() x;
    };
    let
        Numero num = new Numero(2);
        Numero num1 = new Numero(3);
        Numero num2 = num.uno();
        Numero num3 = num1.uno();
    in
        print(num2.due() + num3.due());
-   "10"

Function returning an object:
-   class Numero (int x) {
        int getNum() x;
    };
    let
        Numero uno() new Numero(1);
        Numero num = uno();
    in
        print(num.getNum());
-   "1"

Non-overriden method call:
-   class Animale(int Age, bool Alive){
        int getAge() Age;
        bool isAlive() Alive;
    }

    class Cane implements Animale(int Age, bool Alive){
        int quantoViveAncora()
            if(Alive) then {
                if(Age == 15) then {
                    (15 - Age)
                } else {
                    1
                }
            } else {
                0
            };
    }

    class BullDog implements Cane(int Age, bool Alive){
        int quantoViveAncora()
            if(Alive) then {
                if(Age == 8) then {
                    (8 - Age)
                } else {
                    1
                }
            } else {
                0
            };
    };

    let
        Cane tom = new Cane( 7 , false );
        Cane roger = new BullDog( 6 , true);
    in
        print(roger.getAge() + roger.quantoViveAncora());
-   "7"

Subclass inside superclass:
-   class A (int x) {
        B createB() new B(x, 2);
    }
    class B implements A (int x, int y) {
        int getX() x;
        int getY() y;
    }
    ;
    let
        A a = new A(1);
        B b = a.createB();
    in
        print(b.getY());
-   "2"

Subclass inside superclass' constructor:
-   class A (B b)
    class B implements A (B b);
    print(1);
-   "1"

##########################################################

##########################################################
#			                                             #
##########################################################

Valore di ritorno metodo corretto:
-     class A {
         int get() 44;
      }
      class B implements A{
         int get() 555;
      };
      let B objb = new B;
      int y = objb.get();
      in print(y);
- "555"

Valore di ritorno metodo corretto 2:
-     class A(B object) {
         B get() object;
      }
      class B {
         int get() 555;
      };
      let B objb = new B;
      A obja = new A(objb);
      B objb2 = obja.get();
      in print(objb2);
- "2"

Valore di ritorno metodo errato:
-     class A {
         int get() 44;
      }
      class B implements A{
         int get() 555;
      };
      let B objb = new B;
      bool y = objb.get();
      in print(y);
- "semantic errors"

Valore di ritorno metodo errato 2:
-     class B(C object){
         C get() object;
      }
      class C {
         int get() 44;
      };
      let
      C objc = new C;
      B objb = new B(objc);
      int y = objb.get();
      in print(y);
- "semantic errors"

Esempio Claudio:
-  class A {
      int get() 44;
   }
   class B implements A{
      int get() 555;
   }
   class C (A ogg)
   {
      int ooo() ogg.get();
   };
   let C y = new C(new B);
   in print(y.ooo());
- "555"

Esempio claudio2:
- class A {
    int get() 44;
  }
  class B implements A{
    int get() 555;
  }
  class C (A ogg, int ii){
    int ooo()  ogg.get() + ii;
  };
  let C y = new C(new B, 1);
  in print(y.ooo());
- "556"

Esempio claudio3:
- class A {
    int get() 44;
  }
  class B implements A{
    int get() 555;
  }
  class C (A ogg){
    int ooo() ogg.get();
  };
  let C y2 = new C(new A);
      C y = new C(new B);
  in print(y2.ooo());
- "44"


a test:
- class A {
    int f() 44;
  }
  class B implements A
  class C implements B
  class D implements B;
  let A a = new A;
      B b = new B;
      C c = new C;
      D d = new D;
      A foo() b;
      A robo = foo();
  in print(robo.f());
- "44"

If test:
- class A {
    int f() 44;
  }
  class B implements A
  class C implements B
  class D implements B;
  let A a = new A;
      C c = new C;
      D d = new D;
      A foo() if true then {c} else {d};
      A robo = foo();
  in robo.f();
- "44"

If test 2:
- class A {
    int f() 44;
  }
  class B implements A
  class C implements B
  class D implements B;
  let A a = new A;
      C c = new C;
      D d = new D;
      C foo() if true then {c} else {d};
      C robo = foo();
  in robo.f();
- "type errors"